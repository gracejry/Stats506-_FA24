---
title: "506a1"
author: Ruyue Jiang
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

```{r}
library(tidyverse)
```

repo link: <https://github.com/gracejry/Stats506>

## Problem 1

From <https://archive.ics.uci.edu/dataset/109/wine>, download the data set about wine. It contains two files of interest - “wine.data” with the actual rectangular data set, and “wine.names” with some information about the data. (Both files are plain-text - you can open then in any text editor, including directly in RStudio.)

a.  Import the data into a `data.frame` in R. Use the information in the “wine.names” file to give appropriate column names. (Note: Downloading and unzipping the file can take place outside of your submitted document, but importing the file should be in the submission.)

```{r}
setwd("/Users/gracejiang/Downloads/wine")
wine_data <- read.table("wine.data", sep = ",", header = FALSE)
colnames(wine_data) <- c("Class", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
head(wine_data)
```

b.  The data contains information on three different classes of wine. Check and report that the number of wines within each class is correct as reported in “wine.names”.

```{r}
wine_number <- wine_data %>% group_by(Class) %>% count()
wine_number
```

The number of wines within each class is correct as reported in "wine,names". There are 59 in Class 1, 71 in Class 2 and 48 in Class 3.

c.  Use the data to answer the following questions:

    1.  What is the correlation between alcohol content and color intensity?

    2.  Which class has the highest correlation? Which has the lowest?

    3.  What is the alcohol content of the wine with the highest color intensity?

    4.  What percentage of wines had a higher content of proanthocyanins compare to ash?

```{r}
corr1 <- cor(wine_data$Alcohol, wine_data$`Color intensity`)
corr1
```

The correlation between alcohol content and color intensity is 0.5463642.

```{r}
corr_class <- wine_data %>% 
                  group_by(Class) %>% 
                  summarize(cor(Alcohol,`Color intensity`))
corr_class
```

Class 1 has the highest correlation, and class 2 has the lowest one.

```{r}
highest_value <- wine_data %>% 
                 select(Alcohol, `Color intensity`) %>% 
                 arrange(desc(`Color intensity`)) %>% head(1)
highest_value
```

The alcohol content of the wine with the highest color intensity is 14.34.

```{r}
wine_percent <- wine_data %>% summarize(mean(Proanthocyanins > Ash, na.rm = TRUE))
wine_percent * 100
```

8.426966% wines had a higher content of proanthocyanins compare to ash.

d.  Create a table identifying the average value of each variable, providing one row for the overall average, and one row per class with class averages. (This table does not need to be “fancy” but should clearly identify what each value represents.)

```{r}
mean_all <- wine_data %>% 
            summarise_all(mean) %>% 
            mutate(Class = "Overall")

mean_by_class <- wine_data %>% 
                 group_by(Class) %>% 
                 summarize_all(mean) %>% 
                 mutate(Class = as.character(Class))
table1 <-  bind_rows(mean_all, mean_by_class)
table1
```

The first row of the table shows the average value of each variable. And the second to the forth row each shows the average value of each class of each variable.

e.  Carry out a series of t-tests to examine whether the level of phenols differs across the three classes. Present the R output and interpret the results. (You may use an existing R function to carry out the t-test, or for **minor extra credit**, manually write your own calculation of the t-test p-values.)

```{r}
class1 <- wine_data[wine_data$Class == 1, "Total phenols"]
class2 <- wine_data[wine_data$Class == 2, "Total phenols"]
class3 <- wine_data[wine_data$Class == 3, "Total phenols"]

t_test_1_2 <- t.test(class1, class2)
t_test_1_3 <- t.test(class1, class3)
t_test_2_3 <- t.test(class2, class3)

t_test_1_2
t_test_1_3
t_test_2_3
```

Class1 vs Class2: The p-value = 1.889e-11, less than 0.05, meaning the difference in the level of Total phenols between class1 and class2 is statistically significant. Class1 has a higher mean level of phenols than class2.

Class1 vs Class3: The p-value \< 2.2e-16, meaning the difference in the level of Total phenols between class1 and class3 is statistically significant. Class1 has a higher mean level of phenols than class2.

Class2 vs Class3: The p-value = 1.622e-10, less than 0.05, meaning the difference in the level of Total phenols between class1 and class2 is statistically significant. Class2 has a higher mean level of phenols than class3.

## Problem 2

Please download [this dataset](https://dept.stat.lsa.umich.edu/~jerrick/courses/stat506_f24/data/AskAManager.csv). It is from an ongoing salary survey from AskAManager.org. We’re going to do some data cleaning to prepare it for an analysis.

a.  Import the data into a `data.frame` in R. As with the wine data, you may download the data outside of your submission, but importation should take place inside the problem set submission.

```{r}
Ask_data <- read_csv("~/Downloads/AskAManager.csv")
```

b.  Clean up the variable names. Simplify them.

```{r}
colnames(Ask_data) <- c("Number","Time","Age","Working Industry","Job title","Job Additional Context","Annual Salary","Additional Compensation","Currency","Other Currency","Income Additional Context","Country","US Working Location","City","Overall Work Experience","Field Work Experience","Education Level","Gender","Race")
```

c.  Restrict the data to those being paid in US dollars (USD). Show that it worked by confirming the number of observations before and after restricting the data.

```{r}
Ask_data_usd <- Ask_data %>% filter(Currency == "USD")
nrow(Ask_data_usd)
nrow(Ask_data)
```

The number before was 28062, and the number after restricting the data is 23374.

d.  Assume no one starts working before age 18. Eliminate any rows for which their age, years of experience in their field, and years of experience total are impossible. Again, confirm the number of observations. (Hint: Making these variables `factor` may make your life easier.)

```{r}
Ask_data %>% select(Age) %>% distinct()
Ask_data %>% select(`Overall Work Experience`) %>% distinct()
Ask_data %>% select(`Field Work Experience`) %>% distinct()

experience_levels <- c("1 year or less", "2 - 4 years", "5-7 years", "8 - 10 years", "11 - 20 years", "21 - 30 years", "31 - 40 years", "41 years or more")

Ask_data_18 <- Ask_data %>% mutate(Age = factor(Age),`Overall Work Experience` = factor(`Overall Work Experience`, levels = experience_levels, ordered = TRUE),`Field Work Experience` = factor(`Field Work Experience`, levels = experience_levels, ordered = TRUE)) %>% filter(Age != "under 18")

Ask_data_cleaned <- Ask_data_18 %>%
  filter(`Field Work Experience` <= `Overall Work Experience`)
Ask_data_cleaned %>% count()
Ask_data %>% count()
```

The number before was 28062, and after is 27789.

e.  A lot of the incomes are likely false. Eliminate any rows with extremely low or extremely high salaries. I’ll leave the decision of what thresholds to use up to you; you could choose to eliminate only impossible values, or you could restrict the sample to eliminate the extreme values even if they are realistic (e.g. removing the billionaires or the folks making \< \$1,000 per year). You must justify your choice, along with either a cited source or an exploration the data, or some combination.

```{r}
low_income_threshold <- 1000
high_income_threshold <- 1000000
filtered_data <- Ask_data_cleaned %>%
  filter(`Annual Salary` >= low_income_threshold & `Annual Salary` <= high_income_threshold)
filtered_data %>% count()
Ask_data %>% count()
```

The sample size is 27614 now, before it was 28062.

f.  (Optional) If you want to see this analysis through for *no credit*, answer the research question of whether there is a statistical association between education and salary, controlling for years of experience.

## Problem 3

Palindromic numbers are integers that are equal to the reverse of their digits. For example, 59195 is palindromic, whereas 59159 is not.

a.  Write function `isPalindromic` that checks if a given positive integer is a palindrome. Be sure to provide a reasonable error on an invalid input. Be sure to document your function (see instructions above).

    -   Input: A positive integer

    -   Output: A list with two elements:

        -   `isPalindromic`: A logical value indicating if the input is palindromic.

        -   `reversed`: The input with its digits reversed.

    E.g.,

    ```         
    > isPalindromic(728827)
    $isPalindromic
    [1] TRUE

    $reversed
    [1] 728827

    > isPalindromic(39951)
    $isPalindromic
    [1] FALSE

    $reversed
    [1] 15993
    ```

```{r}
#' isPalindromic function
#' 
#' Palindromic numbers are integers that are equal to the reverse of their digits.
#' This function checks if a given positive integer is palindromic
#' It will provide an error if the input is not a positive integer.
#' It also returns the reversed number.
#' 
#' @param n A positive number
#'
#' @return A list with two elements: 
#' \item{isPalindromic}{Logical: TRUE if the input number is palindromic, FALSE otherwise.}
#' \item{reversed}{The integer input with its digits reversed.}
#'
#' @examples
#' isPalindromic(728827)  # Returns TRUE, and the reversed number
#' isPalindromic(39951)   # Returns FALSE, and the reversed number
#' @export
#' 
isPalindromic <- function(n) {
  if (!is.numeric(n) || n <= 0 || n != as.integer(n)) {
    stop("Error: Input must be a positive integer.")
  }
  
  n_str <- as.character(n)
  
  reversed_str <- paste(rev(strsplit(n_str, NULL)[[1]]), collapse = "")
  
  is_palindromic <- n_str == reversed_str
  
  return(list(isPalindromic = is_palindromic, reversed = as.integer(reversed_str)))
}

print(isPalindromic(728827))
print(isPalindromic(39951))

```

b.  Create a function `nextPalindrome` that finds the next palindromic number strictly greater than the input. Be sure to provide a reasonable error on an invalid input.

    -   Input: A positive integer

    -   Output: A vector of length 1 with the next palindromic number greater than the input

    E.g.,

    ```         
    > nextPalindrome(7152)
    [1] 7227

    > nextPalindrome(765431537)
    [1] 765434567
    ```

```{r}
#' nextPalindrome function
#' 
#' This function finds the next palindromic number strictly greater than a given positive integer.
#'It also provides an error if the input number is not a positive integer.
#'
#' @param n A positive integer
#'
#' @return A single integer representing the next palindromic number greater than the input.
#'
#' @examples
#' nextPalindrome(7152)     # Returns 7227
#' nextPalindrome(765431537) # Returns 765434567
#' 
#' #' @export
#' 
nextPalindrome <- function(n) {
  if (!is.numeric(n) || n <= 0 || n != as.integer(n)) {
    stop("Error: Input must be a positive integer.")
  }
  
next_n <- n + 1
  while (!isPalindromic(next_n)$isPalindromic) { 
    next_n <- next_n + 1
  }
  
  return(next_n)
}

print(nextPalindrome(7152))
print(nextPalindrome(765431537))
```

c.  Use these functions to find the next palindrome for each of the following:

    i.  391

    ii. 9928

    iii. 19272719

    iv. 109

    v.  2

Hints:

-   While there are mathematical ways to approach this (and you can if you wish), string manipulation is fine.

-   Functions can `return` at any point, not just at the end of the code.

-   Be sure to consider what happens with numbers ending in 0.

```{r}
numbers <- c(391, 9928, 19272719, 109, 2)

next_palindromes <- sapply(numbers, nextPalindrome)

next_palindromes
```
